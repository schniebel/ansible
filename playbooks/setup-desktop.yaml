- hosts: localhost
  become: true
  tasks:

    - name: Update system and upgrade all packages
      pacman:
        update_cache: yes
        upgrade: yes

    - name: Install Kernel Headers
      pacman:
        name: "linux-headers"
        state: present

    - name: Install Xorg (Display Server)
      pacman:
        name:
          - xorg
          - xorg-server
        state: present

    - name: Reinstall Nvidia Open DKMS (Ensure Source Files Exist)
      pacman:
        name: nvidia-open-dkms
        state: absent

    - name: Install Nvidia Open-Source Drivers
      pacman:
        name:
          - nvidia-open-dkms  # âœ… Open-source driver (recommended)
          - nvidia-utils
          - lib32-nvidia-utils
          - nvidia-settings
        state: present

    - name: Ensure Nouveau is Blacklisted
      copy:
        dest: /etc/modprobe.d/blacklist-nouveau.conf
        content: "blacklist nouveau"

    - name: Remove kms from mkinitcpio hooks
      replace:
        path: /etc/mkinitcpio.conf
        regexp: '(^HOOKS=.*)\bkms\b'
        replace: '\1'
      notify: Regenerate Initramfs

    - name: Enable Nvidia DRM Kernel Mode Setting
      copy:
        dest: /etc/modprobe.d/nvidia-drm.conf
        content: "options nvidia-drm modeset=1"

    - name: Regenerate Initramfs
      command: mkinitcpio -P

    - name: Get installed Nvidia Open DKMS version
      command: pacman -Q nvidia-open-dkms
      register: nvidia_dkms_version_raw
      changed_when: false

    - name: Extract Nvidia Open DKMS version
      set_fact:
        nvidia_dkms_version: "{{ nvidia_dkms_version_raw.stdout.split(' ')[1] }}"

    - name: Verify Nvidia DKMS Source Directory Exists
      stat:
        path: "/usr/src/nvidia-{{ nvidia_dkms_version }}"
      register: dkms_source

    - name: Ensure Nvidia Kernel Module is Installed via DKMS
      command: dkms install nvidia-open/{{ nvidia_dkms_version }}
      register: dkms_status
      failed_when: "'Error' in dkms_status.stderr"
      when: dkms_source.stat.exists

    - name: Ensure Nvidia Kernel Module Loads at Boot
      copy:
        dest: /etc/modules-load.d/nvidia.conf
        content: |
          nvidia
          nvidia-modeset
          nvidia-drm
          nvidia-uvm

    - name: Install KDE Plasma
      pacman:
        name:
          - plasma
          - kde-applications
        state: present

    - name: Install SDDM (KDE Display Manager)
      pacman:
        name: sddm
        state: present

    - name: Ensure SDDM config directory exists
      file:
        path: /etc/sddm.conf.d
        state: directory
        mode: '0755'

    - name: Force SDDM to use X11
      copy:
        dest: /etc/sddm.conf.d/kde_settings.conf
        content: |
          [General]
          DisplayServer=X11

    - name: Ensure Plasma X11 is the default session for all users
      copy:
        dest: /usr/share/xsessions/plasma.desktop
        content: |
          [Desktop Entry]
          Name=Plasma
          Comment=KDE Plasma
          Exec=/usr/bin/startplasma-x11
          TryExec=/usr/bin/startplasma-x11
          Type=Application

    - name: Set ibt=off in GRUB for 11th Gen+ Intel CPUs
      replace:
        path: /etc/default/grub
        regexp: '^(GRUB_CMDLINE_LINUX_DEFAULT=".*)"'
        replace: '\1 ibt=off"'
      notify: Update GRUB

    - name: Update GRUB
      command: grub-mkconfig -o /boot/grub/grub.cfg

    - name: Enable SDDM to start at boot
      systemd:
        name: sddm
        enabled: yes
        state: started

    - name: Install OpenSSH
      pacman:
        name: openssh
        state: present

    - name: Enable and start SSH service
      systemd:
        name: sshd
        enabled: yes
        state: started

    - name: Disable suspend, hibernate, hybrid-sleep & suspend-then-hibernate
      systemd:
        name: "{{ item }}"
        enabled: false
        masked: true
      loop:
        - sleep.target
        - suspend.target
        - hibernate.target
        - hybrid-sleep.target
        - suspend-then-hibernate.target

    - name: Ensure KDE power management settings prevent sleep
      copy:
        dest: /etc/xdg/autostart/disable-sleep.desktop
        content: |
          [Desktop Entry]
          Type=Application
          Exec=xset -dpms; xset s off
          Hidden=false
          NoDisplay=false
          X-GNOME-Autostart-enabled=true
          Name[en_US]=Disable Sleep
          Name=Disable Sleep
          Comment=Prevents sleep and screen blanking

    - name: Verify Nvidia is Active After Installation
      command: nvidia-smi
      register: nvidia_status
      failed_when: "'failed' in nvidia_status.stderr"

    - name: Install base-devel and git (Required for AUR package builds)
      pacman:
        name:
          - base-devel
          - git
        state: present
    
    - name: Clone yay AUR repository
      git:
        repo: https://aur.archlinux.org/yay.git
        dest: "/home/{{ ansible_env.USER }}/yay"
        clone: yes
        update: no
      become: no  # Clone as the current user

    - name: Build and install yay
      command:
        cmd: makepkg -si --noconfirm
        chdir: "/home/{{ ansible_env.USER }}/yay"
      become: no  # Run as the current user

    - name: Install Google Chrome via AUR using yay
      command: yay -S --noconfirm google-chrome
      args:
        creates: /usr/bin/google-chrome

    - name: Install Slack
      pacman:
        name: slack-desktop
        state: present

    - name: Install GitHub CLI
      pacman:
        name: github-cli
        state: present

    - name: Install Zoom
      pacman:
        name: zoom
        state: present

    - name: Install Notesnook
      become: yes
      pacman:
        name: notesnook-bin
        state: present

  handlers:
    - name: Regenerate Initramfs
      command: mkinitcpio -P
    - name: Update GRUB
      command: grub-mkconfig -o /boot/grub/grub.cfg
